// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class DSafeCreated extends ethereum.Event {
  get params(): DSafeCreated__Params {
    return new DSafeCreated__Params(this);
  }
}

export class DSafeCreated__Params {
  _event: DSafeCreated;

  constructor(event: DSafeCreated) {
    this._event = event;
  }

  get dSafe(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ERC20Added extends ethereum.Event {
  get params(): ERC20Added__Params {
    return new ERC20Added__Params(this);
  }
}

export class ERC20Added__Params {
  _event: ERC20Added;

  constructor(event: ERC20Added) {
    this._event = event;
  }

  get erc20Idx(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get erc20(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get dosTokem(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[4].value.toString();
  }

  get decimals(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get valueOracle(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get colFactor(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get borrowFactor(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get interest(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class ERC20Approval extends ethereum.Event {
  get params(): ERC20Approval__Params {
    return new ERC20Approval__Params(this);
  }
}

export class ERC20Approval__Params {
  _event: ERC20Approval;

  constructor(event: ERC20Approval) {
    this._event = event;
  }

  get erc20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC721Approval extends ethereum.Event {
  get params(): ERC721Approval__Params {
    return new ERC721Approval__Params(this);
  }
}

export class ERC721Approval__Params {
  _event: ERC721Approval;

  constructor(event: ERC721Approval) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class IDOS__computePositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    return map;
  }

  getTotalValue(): BigInt {
    return this.value0;
  }

  getCollateral(): BigInt {
    return this.value1;
  }

  getDebt(): BigInt {
    return this.value2;
  }
}

export class IDOS__viewNFTsResultValue0Struct extends ethereum.Tuple {
  get erc721(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }
}

export class IDOS extends ethereum.SmartContract {
  static bind(address: Address): IDOS {
    return new IDOS("IDOS", address);
  }

  addERC20Info(
    erc20Contract: Address,
    name: string,
    symbol: string,
    decimals: i32,
    valueOracle: Address,
    colFactor: BigInt,
    borrowFactor: BigInt,
    interest: BigInt
  ): i32 {
    let result = super.call(
      "addERC20Info",
      "addERC20Info(address,string,string,uint8,address,int256,int256,int256):(uint16)",
      [
        ethereum.Value.fromAddress(erc20Contract),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals)),
        ethereum.Value.fromAddress(valueOracle),
        ethereum.Value.fromSignedBigInt(colFactor),
        ethereum.Value.fromSignedBigInt(borrowFactor),
        ethereum.Value.fromSignedBigInt(interest)
      ]
    );

    return result[0].toI32();
  }

  try_addERC20Info(
    erc20Contract: Address,
    name: string,
    symbol: string,
    decimals: i32,
    valueOracle: Address,
    colFactor: BigInt,
    borrowFactor: BigInt,
    interest: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "addERC20Info",
      "addERC20Info(address,string,string,uint8,address,int256,int256,int256):(uint16)",
      [
        ethereum.Value.fromAddress(erc20Contract),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals)),
        ethereum.Value.fromAddress(valueOracle),
        ethereum.Value.fromSignedBigInt(colFactor),
        ethereum.Value.fromSignedBigInt(borrowFactor),
        ethereum.Value.fromSignedBigInt(interest)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  allowance(erc20: Address, _owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(spender)
      ]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    erc20: Address,
    _owner: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(spender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approveERC20(erc20: Address, spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "approveERC20",
      "approveERC20(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_approveERC20(
    erc20: Address,
    spender: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approveERC20",
      "approveERC20(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  computePosition(dSafeAddress: Address): IDOS__computePositionResult {
    let result = super.call(
      "computePosition",
      "computePosition(address):(int256,int256,int256)",
      [ethereum.Value.fromAddress(dSafeAddress)]
    );

    return new IDOS__computePositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_computePosition(
    dSafeAddress: Address
  ): ethereum.CallResult<IDOS__computePositionResult> {
    let result = super.tryCall(
      "computePosition",
      "computePosition(address):(int256,int256,int256)",
      [ethereum.Value.fromAddress(dSafeAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IDOS__computePositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  createDSafe(): Address {
    let result = super.call("createDSafe", "createDSafe():(address)", []);

    return result[0].toAddress();
  }

  try_createDSafe(): ethereum.CallResult<Address> {
    let result = super.tryCall("createDSafe", "createDSafe():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(collection: Address, tokenId: BigInt): Address {
    let result = super.call(
      "getApproved",
      "getApproved(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toAddress();
  }

  try_getApproved(
    collection: Address,
    tokenId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDAccountERC20(dSafe: Address, erc20: Address): BigInt {
    let result = super.call(
      "getDAccountERC20",
      "getDAccountERC20(address,address):(int256)",
      [ethereum.Value.fromAddress(dSafe), ethereum.Value.fromAddress(erc20)]
    );

    return result[0].toBigInt();
  }

  try_getDAccountERC20(
    dSafe: Address,
    erc20: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDAccountERC20",
      "getDAccountERC20(address,address):(int256)",
      [ethereum.Value.fromAddress(dSafe), ethereum.Value.fromAddress(erc20)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDSafeOwner(dSafe: Address): Address {
    let result = super.call(
      "getDSafeOwner",
      "getDSafeOwner(address):(address)",
      [ethereum.Value.fromAddress(dSafe)]
    );

    return result[0].toAddress();
  }

  try_getDSafeOwner(dSafe: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDSafeOwner",
      "getDSafeOwner(address):(address)",
      [ethereum.Value.fromAddress(dSafe)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getImplementation(dSafe: Address): Address {
    let result = super.call(
      "getImplementation",
      "getImplementation(address):(address)",
      [ethereum.Value.fromAddress(dSafe)]
    );

    return result[0].toAddress();
  }

  try_getImplementation(dSafe: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getImplementation",
      "getImplementation(address):(address)",
      [ethereum.Value.fromAddress(dSafe)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMaximumWithdrawableOfERC20(erc20: Address): BigInt {
    let result = super.call(
      "getMaximumWithdrawableOfERC20",
      "getMaximumWithdrawableOfERC20(address):(int256)",
      [ethereum.Value.fromAddress(erc20)]
    );

    return result[0].toBigInt();
  }

  try_getMaximumWithdrawableOfERC20(
    erc20: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaximumWithdrawableOfERC20",
      "getMaximumWithdrawableOfERC20(address):(int256)",
      [ethereum.Value.fromAddress(erc20)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(
    collection: Address,
    _owner: Address,
    spender: Address
  ): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(spender)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    collection: Address,
    _owner: Address,
    spender: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(collection),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(spender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFromERC20(
    erc20: Address,
    from: Address,
    to: Address,
    amount: BigInt
  ): boolean {
    let result = super.call(
      "transferFromERC20",
      "transferFromERC20(address,address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFromERC20(
    erc20: Address,
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFromERC20",
      "transferFromERC20(address,address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(erc20),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  viewNFTs(dSafe: Address): Array<IDOS__viewNFTsResultValue0Struct> {
    let result = super.call(
      "viewNFTs",
      "viewNFTs(address):((address,uint256)[])",
      [ethereum.Value.fromAddress(dSafe)]
    );

    return result[0].toTupleArray<IDOS__viewNFTsResultValue0Struct>();
  }

  try_viewNFTs(
    dSafe: Address
  ): ethereum.CallResult<Array<IDOS__viewNFTsResultValue0Struct>> {
    let result = super.tryCall(
      "viewNFTs",
      "viewNFTs(address):((address,uint256)[])",
      [ethereum.Value.fromAddress(dSafe)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<IDOS__viewNFTsResultValue0Struct>()
    );
  }
}

export class AddERC20InfoCall extends ethereum.Call {
  get inputs(): AddERC20InfoCall__Inputs {
    return new AddERC20InfoCall__Inputs(this);
  }

  get outputs(): AddERC20InfoCall__Outputs {
    return new AddERC20InfoCall__Outputs(this);
  }
}

export class AddERC20InfoCall__Inputs {
  _call: AddERC20InfoCall;

  constructor(call: AddERC20InfoCall) {
    this._call = call;
  }

  get erc20Contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get valueOracle(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get colFactor(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get borrowFactor(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get interest(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class AddERC20InfoCall__Outputs {
  _call: AddERC20InfoCall;

  constructor(call: AddERC20InfoCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class AddNFTInfoCall extends ethereum.Call {
  get inputs(): AddNFTInfoCall__Inputs {
    return new AddNFTInfoCall__Inputs(this);
  }

  get outputs(): AddNFTInfoCall__Outputs {
    return new AddNFTInfoCall__Outputs(this);
  }
}

export class AddNFTInfoCall__Inputs {
  _call: AddNFTInfoCall;

  constructor(call: AddNFTInfoCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get valueOracleAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get collateralFactor(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddNFTInfoCall__Outputs {
  _call: AddNFTInfoCall;

  constructor(call: AddNFTInfoCall) {
    this._call = call;
  }
}

export class ApproveERC20Call extends ethereum.Call {
  get inputs(): ApproveERC20Call__Inputs {
    return new ApproveERC20Call__Inputs(this);
  }

  get outputs(): ApproveERC20Call__Outputs {
    return new ApproveERC20Call__Outputs(this);
  }
}

export class ApproveERC20Call__Inputs {
  _call: ApproveERC20Call;

  constructor(call: ApproveERC20Call) {
    this._call = call;
  }

  get erc20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ApproveERC20Call__Outputs {
  _call: ApproveERC20Call;

  constructor(call: ApproveERC20Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveERC721Call extends ethereum.Call {
  get inputs(): ApproveERC721Call__Inputs {
    return new ApproveERC721Call__Inputs(this);
  }

  get outputs(): ApproveERC721Call__Outputs {
    return new ApproveERC721Call__Outputs(this);
  }
}

export class ApproveERC721Call__Inputs {
  _call: ApproveERC721Call;

  constructor(call: ApproveERC721Call) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ApproveERC721Call__Outputs {
  _call: ApproveERC721Call;

  constructor(call: ApproveERC721Call) {
    this._call = call;
  }
}

export class ClaimNFTCall extends ethereum.Call {
  get inputs(): ClaimNFTCall__Inputs {
    return new ClaimNFTCall__Inputs(this);
  }

  get outputs(): ClaimNFTCall__Outputs {
    return new ClaimNFTCall__Outputs(this);
  }
}

export class ClaimNFTCall__Inputs {
  _call: ClaimNFTCall;

  constructor(call: ClaimNFTCall) {
    this._call = call;
  }

  get erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimNFTCall__Outputs {
  _call: ClaimNFTCall;

  constructor(call: ClaimNFTCall) {
    this._call = call;
  }
}

export class CreateDSafeCall extends ethereum.Call {
  get inputs(): CreateDSafeCall__Inputs {
    return new CreateDSafeCall__Inputs(this);
  }

  get outputs(): CreateDSafeCall__Outputs {
    return new CreateDSafeCall__Outputs(this);
  }
}

export class CreateDSafeCall__Inputs {
  _call: CreateDSafeCall;

  constructor(call: CreateDSafeCall) {
    this._call = call;
  }
}

export class CreateDSafeCall__Outputs {
  _call: CreateDSafeCall;

  constructor(call: CreateDSafeCall) {
    this._call = call;
  }

  get dSafe(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DepositERC20Call extends ethereum.Call {
  get inputs(): DepositERC20Call__Inputs {
    return new DepositERC20Call__Inputs(this);
  }

  get outputs(): DepositERC20Call__Outputs {
    return new DepositERC20Call__Outputs(this);
  }
}

export class DepositERC20Call__Inputs {
  _call: DepositERC20Call;

  constructor(call: DepositERC20Call) {
    this._call = call;
  }

  get erc20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositERC20Call__Outputs {
  _call: DepositERC20Call;

  constructor(call: DepositERC20Call) {
    this._call = call;
  }
}

export class DepositFullCall extends ethereum.Call {
  get inputs(): DepositFullCall__Inputs {
    return new DepositFullCall__Inputs(this);
  }

  get outputs(): DepositFullCall__Outputs {
    return new DepositFullCall__Outputs(this);
  }
}

export class DepositFullCall__Inputs {
  _call: DepositFullCall;

  constructor(call: DepositFullCall) {
    this._call = call;
  }

  get erc20s(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class DepositFullCall__Outputs {
  _call: DepositFullCall;

  constructor(call: DepositFullCall) {
    this._call = call;
  }
}

export class DepositNFTCall extends ethereum.Call {
  get inputs(): DepositNFTCall__Inputs {
    return new DepositNFTCall__Inputs(this);
  }

  get outputs(): DepositNFTCall__Outputs {
    return new DepositNFTCall__Outputs(this);
  }
}

export class DepositNFTCall__Inputs {
  _call: DepositNFTCall;

  constructor(call: DepositNFTCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositNFTCall__Outputs {
  _call: DepositNFTCall;

  constructor(call: DepositNFTCall) {
    this._call = call;
  }
}

export class ExecuteBatchCall extends ethereum.Call {
  get inputs(): ExecuteBatchCall__Inputs {
    return new ExecuteBatchCall__Inputs(this);
  }

  get outputs(): ExecuteBatchCall__Outputs {
    return new ExecuteBatchCall__Outputs(this);
  }
}

export class ExecuteBatchCall__Inputs {
  _call: ExecuteBatchCall;

  constructor(call: ExecuteBatchCall) {
    this._call = call;
  }

  get calls(): Array<ExecuteBatchCallCallsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      ExecuteBatchCallCallsStruct
    >();
  }
}

export class ExecuteBatchCall__Outputs {
  _call: ExecuteBatchCall;

  constructor(call: ExecuteBatchCall) {
    this._call = call;
  }
}

export class ExecuteBatchCallCallsStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get dSafe(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class SendNFTCall extends ethereum.Call {
  get inputs(): SendNFTCall__Inputs {
    return new SendNFTCall__Inputs(this);
  }

  get outputs(): SendNFTCall__Outputs {
    return new SendNFTCall__Outputs(this);
  }
}

export class SendNFTCall__Inputs {
  _call: SendNFTCall;

  constructor(call: SendNFTCall) {
    this._call = call;
  }

  get erc721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SendNFTCall__Outputs {
  _call: SendNFTCall;

  constructor(call: SendNFTCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get _config(): SetConfigCall_configStruct {
    return changetype<SetConfigCall_configStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SetConfigCall_configStruct extends ethereum.Tuple {
  get liqFraction(): BigInt {
    return this[0].toBigInt();
  }

  get fractionalReserveLeverage(): BigInt {
    return this[1].toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get erc20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferFromERC20Call extends ethereum.Call {
  get inputs(): TransferFromERC20Call__Inputs {
    return new TransferFromERC20Call__Inputs(this);
  }

  get outputs(): TransferFromERC20Call__Outputs {
    return new TransferFromERC20Call__Outputs(this);
  }
}

export class TransferFromERC20Call__Inputs {
  _call: TransferFromERC20Call;

  constructor(call: TransferFromERC20Call) {
    this._call = call;
  }

  get erc20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferFromERC20Call__Outputs {
  _call: TransferFromERC20Call;

  constructor(call: TransferFromERC20Call) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromERC721Call extends ethereum.Call {
  get inputs(): TransferFromERC721Call__Inputs {
    return new TransferFromERC721Call__Inputs(this);
  }

  get outputs(): TransferFromERC721Call__Outputs {
    return new TransferFromERC721Call__Outputs(this);
  }
}

export class TransferFromERC721Call__Inputs {
  _call: TransferFromERC721Call;

  constructor(call: TransferFromERC721Call) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferFromERC721Call__Outputs {
  _call: TransferFromERC721Call;

  constructor(call: TransferFromERC721Call) {
    this._call = call;
  }
}

export class UpgradeImplementationCall extends ethereum.Call {
  get inputs(): UpgradeImplementationCall__Inputs {
    return new UpgradeImplementationCall__Inputs(this);
  }

  get outputs(): UpgradeImplementationCall__Outputs {
    return new UpgradeImplementationCall__Outputs(this);
  }
}

export class UpgradeImplementationCall__Inputs {
  _call: UpgradeImplementationCall;

  constructor(call: UpgradeImplementationCall) {
    this._call = call;
  }

  get dSafe(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get version(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpgradeImplementationCall__Outputs {
  _call: UpgradeImplementationCall;

  constructor(call: UpgradeImplementationCall) {
    this._call = call;
  }
}

export class WithdrawFullCall extends ethereum.Call {
  get inputs(): WithdrawFullCall__Inputs {
    return new WithdrawFullCall__Inputs(this);
  }

  get outputs(): WithdrawFullCall__Outputs {
    return new WithdrawFullCall__Outputs(this);
  }
}

export class WithdrawFullCall__Inputs {
  _call: WithdrawFullCall;

  constructor(call: WithdrawFullCall) {
    this._call = call;
  }

  get erc20s(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class WithdrawFullCall__Outputs {
  _call: WithdrawFullCall;

  constructor(call: WithdrawFullCall) {
    this._call = call;
  }
}
